plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "net.ltgt.apt-idea" version "0.21"
    id "org.sonarqube" version "2.8"
    id "org.springframework.boot" version "2.1.9.RELEASE" apply false
    id 'com.bmuschko.docker-spring-boot-application' version '5.2.0' apply false
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.9.RELEASE")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3")
        }
        dependencies {
            dependencySet(group: 'org.mapstruct', version: '1.3.1.Final') {
                entry 'mapstruct'
                entry 'mapstruct-processor'
            }

            dependencySet(group: 'org.springdoc', version: '1.1.49') {
                entry 'springdoc-openapi-core'
                entry 'springdoc-openapi-ui'
            }
        }
    }

    ext['lombok.version'] = '1.18.10'
    ext['junit-jupiter.version'] = '5.5.2'
    ext['wiremock.version'] = '2.23.2'
    ext['mockito.version'] = '3.1.0'
    ext['assertj.version'] = '3.14.0'
    ext['rest-assured.version'] = '4.1.2'
    ext['hamcrest.version'] = '2.1'
    ext['postgresql.version'] = '42.2.8'
    ext['h2.version'] = '1.4.200'
//    ext['flyway.version'] = '6.0.7'
    ext['embedded-mongo.version'] = '2.2.0'
    ext['tomcat.version'] = '9.0.27'

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "failed"
            exceptionFormat "full"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "octopus-prime_demo"
    }
}

task dockerEnvUp(type: Exec, group: 'deployment docker') {
    commandLine 'docker-compose', '-f', 'deployment/docker/env/docker-compose.yml', 'up', '-d'
}

task dockerEnvDown(type: Exec, group: 'deployment docker') {
    commandLine 'docker-compose', '-f', 'deployment/docker/env/docker-compose.yml', 'down'
}

task dockerDemoUp(type: Exec, group: 'deployment docker') {
    dependsOn getProject().getTasksByName('dockerPushImage', true)
    commandLine 'docker-compose', '-f', 'deployment/docker/demo/docker-compose.yml', 'up', '-d', '--force-recreate', '--build'
}

task dockerDemoDown(type: Exec, group: 'deployment docker') {
    commandLine 'docker-compose', '-f', 'deployment/docker/demo/docker-compose.yml', 'down'
}

task helmEnvUp(type: Exec, group: 'deployment helm') {
    commandLine 'microk8s.helm', 'install', '--name', 'env', 'deployment/helm/env'
}

task helmEnvDown(type: Exec, group: 'deployment helm') {
    commandLine 'microk8s.helm', 'delete', '--purge', 'env'
}

task helmDemoUp(type: Exec, group: 'deployment helm') {
    dependsOn getProject().getTasksByName('dockerPushImage', true)
    commandLine 'microk8s.helm', 'install', '--name', 'demo', 'deployment/helm/demo'
}

task helmDemoDown(type: Exec, group: 'deployment helm') {
    commandLine 'microk8s.helm', 'delete', '--purge', 'demo'
}
