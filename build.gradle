import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "com.github.ben-manes.versions" version "0.28.0"
    id "com.gorylenko.gradle-git-properties" version "2.2.2"
    id "org.sonarqube" version "2.8"
    id "org.springframework.boot" version "2.3.0.RELEASE" apply false
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {

    apply plugin: JavaPlugin
    apply plugin: IdeaPlugin
    apply plugin: JacocoPlugin
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.gorylenko.gradle-git-properties'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencyManagement {
        imports {
            mavenBom(SpringBootPlugin.BOM_COORDINATES)
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:2020.0.0-M2")
        }
        dependencies {
            dependencySet(group: 'org.mapstruct', version: '1.4.0.Beta1') {
                entry 'mapstruct'
                entry 'mapstruct-processor'
            }
            dependencySet(group: 'org.springdoc', version: '1.4.0') {
                entry 'springdoc-openapi-webmvc-core'
                entry 'springdoc-openapi-ui'
            }
            dependency(group: 'au.com.dius', name: 'pact-jvm-provider-junit5', version: '4.0.10')
            dependency(group: 'info.solidsoft.mockito', name: 'mockito-java8', version: '2.5.0')
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat "full"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
            csv.enabled false
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "octopus-prime_demo"
        property "sonar.coverage.exclusions", "**/*Application.java"
    }
}

task dockerEnvUp(type: Exec, group: 'deployment docker') {
    commandLine 'docker-compose', '-f', 'deployment/docker/env/docker-compose.yml', 'up', '-d'
}

task dockerEnvDown(type: Exec, group: 'deployment docker') {
    commandLine 'docker-compose', '-f', 'deployment/docker/env/docker-compose.yml', 'down'
}

task dockerDemoUp(type: Exec, group: 'deployment docker') {
    dependsOn getProject().getTasksByName('pushBuildImage', true)
    commandLine 'docker-compose', '-f', 'deployment/docker/demo/docker-compose.yml', 'up', '-d', '--force-recreate', '--build'
}

task dockerDemoDown(type: Exec, group: 'deployment docker') {
    commandLine 'docker-compose', '-f', 'deployment/docker/demo/docker-compose.yml', 'down'
}

task helmEnvUp(type: Exec, group: 'deployment helm') {
    commandLine 'microk8s.helm3', 'install', 'env', 'deployment/helm/env'
}

task helmEnvDown(type: Exec, group: 'deployment helm') {
    commandLine 'microk8s.helm3', 'uninstall', 'env'
}

task helmDemoUp(type: Exec, group: 'deployment helm') {
    dependsOn getProject().getTasksByName('pushBuildImage', true)
    commandLine 'microk8s.helm3', 'install', 'demo', 'deployment/helm/demo'
}

task helmDemoDown(type: Exec, group: 'deployment helm') {
    commandLine 'microk8s.helm3', 'uninstall', 'demo'
}
