plugins {
    id('org.springframework.boot')
}

dependencies {
    implementation project(':common')
    implementation project(':kunde-api')
    implementation project(':produkt-api')
    implementation project(':rechnung-api')

    annotationProcessor(group: 'org.projectlombok', name: 'lombok')
    compileOnly(group: 'org.projectlombok', name: 'lombok')

    annotationProcessor(group: 'org.mapstruct', name: 'mapstruct-processor')
    compileOnly(group: 'org.mapstruct', name: 'mapstruct')

    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-actuator')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-validation')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-web')
    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth')
    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-zipkin')
    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
    implementation(group: 'org.springframework.retry', name: 'spring-retry')
    implementation(group: 'org.springdoc', name: 'springdoc-openapi-ui')
    implementation(group: 'io.micrometer', name: 'micrometer-registry-influx')
    implementation(group: 'javax.servlet', name: 'javax.servlet-api')

    runtimeOnly(group: 'org.springframework.boot', name: 'spring-boot-devtools')

    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
    testImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock')
    testImplementation(group: 'info.solidsoft.mockito', name: 'mockito-java8')
    testImplementation(group: 'au.com.dius.pact.provider', name: 'junit5')

    testRuntimeOnly(group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo')
    testRuntimeOnly(group: 'org.codehaus.groovy', name: 'groovy')
    testRuntimeOnly(group: 'org.codehaus.groovy', name: 'groovy-xml')
}

compileJava {
    options.compilerArgs += '-Amapstruct.defaultComponentModel=spring'
}

springBoot {
    buildInfo()
}

def image = "localhost:32000/demo/${project.name}:${project.version}"

bootBuildImage {
    imageName = image
}

task pushBuildImage(type: Exec, group: 'build') {
    dependsOn bootBuildImage
    commandLine 'docker', 'push', image
}
